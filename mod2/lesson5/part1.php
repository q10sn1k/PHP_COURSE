<?php
    // preg_match

    $pattern = '#\\\\#'; // шаблон поиска - \ (обратный слеш)
    $replacement = '@';
    $subject = '\\ 111 222 332'; // \ 111 222 332
    $res = preg_replace($pattern, $replacement, $subject);
    //echo $res; // @ 111 222 332

    // Проверим есть ли в строке совпадения в соответвии с патерном (шаблоном поиска)

    $pattern = '#a+#';
    $subject = 'ccc bbb aaa';
    $res = preg_match($pattern, $subject);
    // echo $res; // 1 в искомой строке есть совпадение с шаблоном поиска

    $pattern = '#a+#';
    $subject = 'bb ccc dddd';
    $res = preg_match($pattern, $subject);
    // echo $res; // 0


    //_____________________________________________________________
    // Расширенный пример примененияя регулярных выражений поиска
    $pattern = '#\d{3,}#'; // цифры 3 и более раз

    // создадим массив строк
    $arr = [
        'aaa 123 bbb', // 1
        'aaa 12345 bbb', // 1
        'aaa 12a bbb', // 0
        'aaa 12 bbb', // 0
        'aaaaaa 123456789 bbbbb' // 1
    ];

    // С помощь цикла foreach переберем наш массив $arr и проверим
    // каждый элемент массива в соответствии с шаблоном поиска регулярного выражения
    foreach ($arr as $str) {
        $res = preg_match($pattern, $str);
        // echo "Исходная строка $str | результат работы функции preg_match $res" . '<br>';
    }

    /*
        Результат:

        Исходная строка aaa 123 bbb | результат работы функции preg_match 1
        Исходная строка aaa 12345 bbb | результат работы функции preg_match 1
        Исходная строка aaa 12a bbb | результат работы функции preg_match 0
        Исходная строка aaa 12 bbb | результат работы функции preg_match 0
        Исходная строка aaaaaa 123456789 bbbbb | результат работы функции preg_match 1
     */

    //_____________________________________________________________


    $pattern = '#^w[a-zA-Z]{2}d$#';
    $arr2 = [
        'word', // 1
        '123456word', // 0
        'word2019', // 0
        'word 2019', // 0
        'wwrd', // 1
        'слово', // 0
        'wor', // 0
        'ord', // 0
    ];

    foreach ($arr2 as $str){
        $res = preg_match($pattern, $str);
        //echo "Проверяем строку $str - результат: $res" . '<br>';
    }

    /*
        Проверяем строку word - результат: 1
        Проверяем строку 123456word - результат: 0
        Проверяем строку word2019 - результат: 0
        Проверяем строку word 2019 - результат: 0
        Проверяем строку wwrd - результат: 1
        Проверяем строку слово - результат: 0
        Проверяем строку wor - результат: 0
        Проверяем строку ord - результат: 0
     */


    //_______________________________________________________________________________
    // Карманы регулярных выражений
    // карманы в регулярных выражениях пишутся в круглых скобках - ()

    $pattern = '#([a-z0-9_-]+)\.([a-z]{2,})#';
    /*
        1-й карман - ([a-z0-9_-]+)
        2-й карман - ([a-z]{2,})
     */
    $subject = 'werwergweg site.ru aerwgqaw';
    $res = preg_match($pattern, $subject, $matches);
    /*
      3-й параметр $matches в функции preg_match это массив.

      массив содержит строку подходящую под шаблон поиска - $pattern = '#([a-z0-9_-]+)\.([a-z]{2,})#'
      В нашем примере это домен - site.ru

      Также массив содержит строки сооттветствующие карманам регулярного выражения
      1-й карман  ([a-z0-9_-]+)
      В нашем примере это деменое имя - site

      2-й карман ([a-z]{2,})
      В нашем примере это доменая зона - ru

     */

    //var_dump($matches);


    /*
    [
        'site.ru' // 0-й элемент $matches
        'site' // 1-й элемент это  1-й карман - ([a-z0-9_-]+)
        'ru' // 2-й элемент это 2-й карман - ([a-z]{2,})
    ]
     */


    //________________________________________________________________________________
    // Задача найти домен - site.com, найти доменое имя - site, найти доменую зону - com
    $pattern = '#([a-z0-9_-]+)\.([a-z]{2,})#';
    $subject = 'aaabbcc site.com asdadw';
    $res = preg_match($pattern, $subject, $matches1);
    //var_dump($matches1);



    $pattern = '#([a-z0-9_-]+)\.([a-z]{2,})#';
    $arr3 = [
      'site.com asdadw', // +
      'q10sn1k.ru', // +
      'site@online', // -
      'site.online' // +
    ];

    foreach ($arr3 as $str){
        $res = preg_match($pattern, $str, $matches2);
        // print_r($matches2);
    }










    // Функция preg_match_all

    $pattern = '#a+#'; // a - 1 и более раз
    $subject = 'a aa aaa aaaa bb bbb bbb';
    // узнаем количество совпадение
    $res = preg_match_all($pattern, $subject);
    echo $res; // 4

    //__________________________________________________________________________________

    $pattern = '#([a-z0-9_-]+)\.([a-z]{2,})#';
    $subject = 'site.ru site.com site123.net';
    $res = preg_match_all($pattern, $subject, $matches3);
    print_r($matches3);
    /*
        [
            ['site.ru', 'site.com', 'site123.net'] // массив совпадений с регулярным выражением
            ['site', 'site', 'site123'] // массив совпадений с 1-м карманом регулярного выражения
            ['ru', 'com', 'net'] // массив совпадений со 2-м карманом регулярного выражения
        ]
     */